#! /usr/bin/env python
import sys

from papers.archive import Archive
from skynet.utils.getoptions import InputOption, OptionList, readOptions, OptionSet 
from skynet.utils.utils import acquire, traceback
from papers.isi import ISIError

def execute_search(wok, archive, journal, author, year, volume, page, notes):
    name = "%s %s %d %s (%d)" % (author, journal, volume, page, year)
    print "Parsing %s" % name
    wok.reset(journal, author, year, volume, page)
    try:
        wok.open()
        article = wok.get_article(archive)
        article.add_notes(notes)
        article.store()
    except ISIError, error:
        print "Could not parse %s" % name
        print error
        

#set the allowed command line options and user messages
if __name__ == "__main__":
    opts = [
        InputOption(shortOption='y', longOption='year', optionType='int', bind=True),
        InputOption(shortOption='v', longOption='volume', optionType='int', bind=True),
        InputOption(shortOption='p', longOption='page', optionType='string', bind=True),
        #InputOption(shortOption='t', longOption='title', optionType='string', valuesMandatory=True, bind=True),
        InputOption(shortOption='j', longOption='journal', optionType='string', bind=True),
        InputOption(shortOption='a', longOption='author', optionType='string', listOfValues=True, bind=True),
        InputOption(longOption='archive', optionType='string', bind=True, default="new"),
        InputOption(shortOption='n', longOption='notes', optionType='string', bind=True),
        InputOption(shortOption='f', longOption='format', optionType='string', bind=True),
        InputOption(longOption='download', setbool=True),
        InputOption(shortOption='c', longOption='cited'),
        InputOption(shortOption='l', longOption='list'),
        InputOption(shortOption='g', longOption='grab'),
        ]



    options=OptionSet()
    optionList = OptionList(commandName="getisi",
                            usageStructure=[ "[options]"],
                            optionsList=opts)
    options_given = readOptions(optionList, optionSet=options)

    from papers.isi import WOKParser, WOKSearch

    print options.__dict__

    for option in options_given:
        if option in ('c', 'cited'):
            page = options.page
            parser = WOKParser(options.archive, options.journal, options.author, options.year, options.volume, page, options.notes, download=options.download)
            try:
                parser.run_citedrefs()
            except Exception, error:
                print traceback(error)
                print error
            except KeyboardInterrupt, error:
                print traceback(error)
                pass
            parser.archive.commit()
        elif option in ('l', 'list'):
            parser = WOKParser(options.archive, author=options.author, year=options.year, notes=options.notes, download=options.download)
            try:
                parser.run_allrefs()
            except Exception, error:
                print traceback(error)
                print error
            except KeyboardInterrupt, error:
                print traceback(error)
                pass
            parser.archive.commit()
            
        elif option in ('g', 'grab'):
            notes = options.notes

            import unicodedata
            from papers.pdfglobals import PDFGetGlobals as pdfglobals


            cmd = "import papers.%s as journal_format" % options.format
            exec(cmd)
            method = getattr(journal_format, "parse_reference")

            archive = Archive(options.archive)
            print "Booting up WOK server...",
            wok = WOKSearch()
            wok.start()
            print "Done"

            while 1:
                try:
                    text = acquire("Please input reference").strip()
                    if isinstance(text, unicode): #not unicode
                        text = unicodedata.normalize('NFKD', text).encode('ascii','ignore')

                    if not text:
                        print "No more references"
                        break
                        
                    vals = {}
                    if "format" in text: #change the format method
                        format = text.split("=")[-1].strip()
                        cmd = "import papers.%s as journal_format" % format
                        exec(cmd)
                        method = getattr(journal_format, "parse_reference")
                        print "Switched to %s format" % format
                        continue
                    else:
                        vals = method(text)
                        if not vals:
                            print "Could not parse %s" % text
                            continue

                    additional_notes = raw_input("Notes: ")
                    all_notes = notes
                    if additional_notes:
                        all_notes += "\n%s" % additional_notes

                    journal = vals["journal"]
                    if "ibid" in journal:
                        journal = raw_input("I don't know ibid. Please correct:\n").strip()
                    jobj = pdfglobals.get_journal(journal)
                    if not jobj:
                        sys.stderr.write("Could not find journal object for %s\n" % journal)
                        continue

                    author = vals["authors"][0]
                    execute_search(wok, archive, jobj.name.lower(), author, vals["year"], vals["volume"], vals["page"], notes)
                except Exception, error:
                    print "Unknown error occurred"
                    print traceback(error)
                    print error

            wok.stop()
            archive.commit()

        elif option in ('d', 'download'):
            page = options.page
            notes = options.notes
            archive = Archive(options.archive)
            wok = WOKSearch()
            wok.start()
            execute_search(wok, archive, options.journal, options.author, options.year, options.volume, page, notes)
            wok.stop()
            archive.commit()


