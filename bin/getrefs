#! /usr/bin/env python
import sys
import re
import os
import codecs

from papers.archive import Archive
from skynet.utils.getoptions import InputOption, OptionList, readOptions, OptionSet 
from skynet.utils.clipboard import monitor_clipboard
from skynet.utils.utils import acquire, traceback
from papers.isi import ISIError
from papers.pdfglobals import PDFGetGlobals as pdfglobals


from pygui.utils import gtkIO
gtkIO.redirect_io()

def execute_search(wok, archive, journal, author, year, volume, page, notes):
    name = "%s %s %d %s (%d)" % (author, journal, volume, page, year)
    print "Parsing %s" % name
    wok.reset(journal, author, year, volume, page)
    try:
        wok.open()
        article = wok.get_article(archive)
        article.add_notes(notes)
        article.store()
    except ISIError, error:
        print "Could not parse %s" % name
        print error

def parse_citation(options, author_fxn, citation_regexp, journal = 0, year = 1, volume = 2, page = 3):
    author = None
    match = None
    num = 1
    while not author or not match:
        print "Waiting for input %d" % num
        text = monitor_clipboard().replace("\n"," ")
        print text
        check = re.compile(citation_regexp).search(text)
        if author and not check: #epic fail
            return None

        num += 1

        if not check:
            author = text.replace(".","").replace(";","")
            continue

        match = check

    lastname, initials = author_fxn(author)
    options.author = lastname + "," + initials
    match = match.groups()
    jobj = pdfglobals.get_journal(match[journal])
    if not jobj:
        sys.stderr.write("%s is not a valid journal\n" % match[journal])
        return None

    options.journal = jobj.name
    options.volume = match[volume].strip()
    options.year = match[year].strip()
    options.page = match[page].strip()

    return options.journal

def acs_author_fxn(author):
    lastname, initials = author.split(",")[:2]
    initials = initials.replace(" ","").replace(".","")
    return lastname, initials

def acs(options):
    citation_regexp = '(.*?)(\d+).*?(\d+).*?(\d+)'
    return parse_citation(options, acs_author_fxn, citation_regexp) 

#set the allowed command line options and user messages
if __name__ == "__main__":
    opts = [
        InputOption(shortOption='y', longOption='year', optionType='string', bind=True, default=""),
        InputOption(shortOption='v', longOption='volume', optionType='string', bind=True, default=""),
        InputOption(shortOption='p', longOption='page', optionType='string', bind=True, default=""),
        #InputOption(shortOption='t', longOption='title', optionType='string', valuesMandatory=True, bind=True),
        InputOption(shortOption='j', longOption='journal', optionType='string', bind=True, default=""),
        InputOption(shortOption='a', longOption='author', optionType='string', listOfValues=True, bind=True, default=""),
        InputOption(longOption='archive', optionType='string', bind=True, default="new"),
        InputOption(shortOption='n', longOption='notes', optionType='string', bind=True, default=""),
        InputOption(shortOption='k', longOption='keywords', optionType='string', listOfValues=True, bind=True, default=""),
        InputOption(shortOption='f', longOption='format', optionType='string', bind=True),
        InputOption(shortOption='d',longOption='download', setbool=True),
        InputOption(shortOption='c', longOption='citation', setbool=True),
        InputOption(shortOption='b', longOption='bib'),
        InputOption(shortOption='l', longOption='list'),
        InputOption(shortOption='g', longOption='grab'),
        InputOption(shortOption='r', longOption='ref'),
        InputOption(longOption='refs'),
        InputOption(shortOption='h', longOption='html'),
        ]



    options=OptionSet()
    optionList = OptionList(commandName="getisi",
                            usageStructure=[ "[options]"],
                            optionsList=opts)
    options_given = readOptions(optionList, optionSet=options)


    from papers.isi import WOKParser, WOKSearch

    if options.citation:
        os.system("osascript -e 'the clipboard as unicode text' | tr '\r' '\n' > .stdout")
        citation = codecs.open(".stdout", "r", "utf-8").read()
        journal = acs(options)

    for option in options_given:
        if option in ('b', 'bib'):
            parser = WOKParser(options.archive, journal=options.journal, author=options.author, year=options.year,
                               volume=options.volume, page=options.page, notes=options.notes, download=options.download,
                               keywords=options.keywords)
            try:
                parser.run_citedrefs()
            except Exception, error:
                print traceback(error)
                print error
            except KeyboardInterrupt, error:
                print traceback(error)
                pass
            parser.archive.commit()
        elif option in ('l', 'list'):
            parser = WOKParser(options.archive, journal=options.journal, author=options.author, year=options.year, 
                               volume=options.volume, page=options.page, notes=options.notes, download=options.download,
                               keywords=options.keywords)
            try:
                parser.run_allrefs()
            except Exception, error:
                print traceback(error)
                print error
            except KeyboardInterrupt, error:
                print traceback(error)
                pass
            parser.archive.commit()
            
        elif option in ('g', 'grab'):
            notes = options.notes

            import unicodedata
            from papers.pdfglobals import PDFGetGlobals as pdfglobals


            cmd = "import papers.%s as journal_format" % options.format
            exec(cmd)
            method = getattr(journal_format, "parse_reference")

            archive = Archive(options.archive)
            print "Booting up WOK server...",
            wok = WOKSearch()
            wok.start()
            print "Done"

            while 1:
                try:
                    text = acquire("Please input reference").strip()
                    if isinstance(text, unicode): #not unicode
                        text = unicodedata.normalize('NFKD', text).encode('ascii','ignore')

                    if not text:
                        print "No more references"
                        break
                        
                    vals = {}
                    if "format" in text: #change the format method
                        format = text.split("=")[-1].strip()
                        cmd = "import papers.%s as journal_format" % format
                        exec(cmd)
                        method = getattr(journal_format, "parse_reference")
                        print "Switched to %s format" % format
                        continue
                    else:
                        vals = method(text)
                        if not vals:
                            print "Could not parse %s" % text
                            continue

                    additional_notes = raw_input("Notes: ")
                    all_notes = notes
                    if additional_notes:
                        all_notes += "\n%s" % additional_notes

                    journal = vals["journal"]
                    if "ibid" in journal:
                        journal = raw_input("I don't know ibid. Please correct:\n").strip()
                    jobj = pdfglobals.get_journal(journal)
                    if not jobj:
                        sys.stderr.write("Could not find journal object for %s\n" % journal)
                        continue

                    author = vals["authors"][0]
                    execute_search(wok, archive, jobj.name.lower(), author, vals["year"], vals["volume"], vals["page"], notes)
                except Exception, error:
                    print "Unknown error occurred"
                    print traceback(error)
                    print error

            wok.stop()
            archive.commit()
        elif option in ('h', 'html'):
            parser = WOKParser(options.archive, notes=options.notes, keywords=options.keywords, download=options.download)
            parser.store_article()
            parser.archive.commit()

        elif option in ('r', 'ref'): #single reference
            parser = WOKParser(options.archive, journal=options.journal, author=options.author, year=options.year,
                               volume=options.volume, page=options.page, notes=options.notes, download=options.download,
                               keywords=options.keywords)

            try:
                parser.run_getref()
            except Exception, error:
                print traceback(error)
                print error
            except KeyboardInterrupt, error:
                print traceback(error)
            parser.archive.commit()
        elif option in ('', 'refs'): #single reference
            parser = WOKParser(options.archive, journal=options.journal, author=options.author, year=options.year,
                               volume=options.volume, page=options.page, notes=options.notes, download=options.download,
                               keywords=options.keywords)
            try:
                parser.run_getrefs()
            except Exception, error:
                print traceback(error)
                print error
            except KeyboardInterrupt, error:
                print traceback(error)
            parser.archive.commit()


